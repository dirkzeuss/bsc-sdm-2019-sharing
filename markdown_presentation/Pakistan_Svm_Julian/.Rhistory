pred <- predict(mymodel, iris)
knitr::opts_chunk$set(echo = TRUE)
install.packages("datasets")
library(datasets)
library(e1071)
data(iris) #drei verschiedene Pflanzenarten
str(iris)
install.packages("datasets")
library(e1071)
data(iris) #drei verschiedene Pflanzenarten
str(iris)
install.packages("vembedr")
embed_url("https://www.youtube.com/watch?v=Y6RRHw9uN9o&t=279s")
library(htmltools)
embed_url("https://www.youtube.com/watch?v=Y6RRHw9uN9o&t=279s")
library(vembedr)
embed_url("https://www.youtube.com/watch?v=Y6RRHw9uN9o&t=279s")
library(e1071)
data(iris) #drei verschiedene Pflanzenarten
str(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point() +
labs(title = 'Sepal Length vs Sepal Width')
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point() +
labs(title = 'Sepal Length vs Sepal Width')
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
labs(title = 'Petal Length vs Petal Width')
#Generierung des Models
mymodel <- svm(Species~., data=iris)
summary(mymodel)
#Plot der SVM Classification
plot(mymodel, data=iris,
Petal.Width~Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
#Auswertung des Modells
pred <- predict(mymodel, iris)
tab <- table(Predicted = pred, Actual = iris$Species)
tab
1-sum(diag(tab))/sum(tab) #Gibt in Prozent an, wie genau das Modell ist
plot(mymodel, data=iris,
Petal.Width~Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
![](C:/Users/Julian/Desktop/SVM/SVM_picture.png)
library(e1071)
library(ggplot2)
data(iris) #drei verschiedene Pflanzenarten
str(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point() +
labs(title = 'Sepal Length vs Sepal Width')
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
labs(title = 'Petal Length vs Petal Width')
#Generierung des Models
mymodel <- svm(Species~., data=iris)
summary(mymodel)
#Plot der SVM Classification
plot(mymodel, data=iris,
Petal.Width~Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
tab <- table(Predicted = pred, Actual = iris$Species)
tab
1-sum(diag(tab))/sum(tab) #Gibt in Prozent an, wie genau das Modell ist
library(dismo)
##Download und Bearbeitung der Daten einer (Tier)Art
lynx <- gbif("Lynx", "pardinus", download=T, geo=T, sp=F)
class(lynx) #Zeigt Objekttyp an
w <- which(is.na(lynx$lon)) #ueberprueft die lon-Spalte, ob NA beinhaltet
w #integer(0) = beinhaltet kein NA mehr
lynx <- lynx[-w,] #Zeilen mit NA werden gelÃ¶scht
w #integer(0) = beinhaltet kein NA mehr
w <- which(is.na(lynx$lat)) #ueberprueft die lat-Spalte, ob NA beinhaltet
lynx$species <- 1 #fuegt eine neue Spalte mit species hinzu
sp <- sp[,c('lon', 'lat', 'species')] #Beschriftung der Spalten
lynx <- lynx[,c('lon', 'lat', 'species')] #Beschriftung der Spalten
head(lynx)
coordinates(lynx) <- ~lon + lat #erstellt einen SpatialPointsDataFrame
class(lynx)
bio <- raster::getData('worldclim', var='bio', res=10)
bio
library(usdm)
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
v1
biom <- exclude(bio, v1) #Entfernt Predictor Daten mit einer geringen Korrelation
biom
plot(biom[[1]]) #plottet biom1
points(sp, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
points(lynx, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
proj4string(lynx) <- projection(raster()) #projiziert das sp Objekt in das Koordinatensystem WGS84
library(sdm)
d <- sdmData(species ~., lynx, predictors = biom, bg = list(n=1000))
d
getmethodNames() #Anzeige der verfuegbaren Methoden
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
m
p <- predict(m, biom) # erstellt die Karte anhand des Modells und der Umweltdaten
plot(p) #Plottet Karte mit Verbreitungsgebiet
bio
plot(p)
pak_boun <- read_sf("C:/Users/JulianDDesktop/PAK_adm/Pak_adm1.shx")
library(sf)
pak_boun <- read_sf("C:/Users/JulianDDesktop/PAK_adm/Pak_adm1.shx")
pak_boun <- read_sf("C:/Users/JulianDDesktop/PAK_adm/Pak_adm1.shx")
pak_boun <- read_sf("C:/Users/JulianDDesktop/PAK_adm/Pak_adm1.shp")
pak_boun <- read_sf("C:/Users/Julian/Desktop/PAK_adm/Pak_adm1.shp")
pal_boun
pak_boun
crop(p, pak_boun)
crop(pak_boun, p)
library(raster)
crop(pak_boun, p)
plot(pak_boun)
plot(pak_boun$ID_0)
pak_boun
plot(pak_boun)
plot(pak_boun$1)
plot(pak_boun$geometry)
boundaries <- pak_boun$geometry
boundaries
crop(p, boundaries)
crop(boundaries, p)
pak_boun <- read_sf("C:/Users/Julian/Desktop/PAK_adm/Pak_adm1.shx")
boundaries <- pak_boun$geometry
boundaries
writeRaster(boundaries)
writeRaster("C:/Users/Julian/Desktop/PAK_adm/Pak_adm1.shx")
bio <- raster::getData('worldclim', var='bio',country = 'Pak', res=10)
bio <- raster::getData('worldclim', var='bio',country = 'PAK', res=10)
bio
bio <- raster::getData('worldclim', var='bio',country = 'PK', res=10)
bio <- raster::getData('worldclim', var='bio',country = 'GER', res=10)
bio <- raster::getData('worldclim', var='bio', country = 'GER', level = 1, res=10)
bio <- raster::getData('worldclim', country = 'PK', level = 1, res=10)
library(dismo)
bio <- raster::getData('worldclim', country = 'PK', level = 1, res=10)
read.csv("C:/Users/Julian/Desktop/test.csv")
dis_all <- read.csv("C:/Users/Julian/Desktop/test.csv")
dis_all
coordinates(dis_all) <- ~longtitude + latitude
dis_all
dis_all$species <- 1
crs(dis_all) <- "+proj=longlat +datum=WGS84"
dis_all
bio <- raster::getData('worldclim', var='bio', res=10)
library(usdm)
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
biom <- exclude(bio, v1) #Entfernt Predictor Daten mit einer geringen Korrelation
points(dis_all, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
plot(biom[[1]]) #plottet biom1
points(dis_all, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
library(sdm)
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
p <- predict(m, biom)
plot(p)
biom1 <- plot(biom[[1]])#plottet biom1
crop(biom1,boundaries)
pak_boun <- read_sf("C:/Users/Julian/Desktop/PAK_adm/Pak_adm1.shx")
library(sf)
pak_boun <- read_sf("C:/Users/Julian/Desktop/PAK_adm/Pak_adm1.shx")
boundaries <- pak_boun$geometry
boundaries
crop(biom1,boundaries)
plot(p, xlim=c(0,100), ylim=c(0,50))
plot(p, xlim=c(40,90), ylim=c(10,50))
plot(boundaries)
plot(p, xlim=c(40,90), ylim=c(10,50), add=T)
plot(p, xlim=c(40,90), ylim=c(10,50))
plot(boundaries, add = T)
points(dis_all, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
raster("C:/Users/Julian/Desktop/anual_mean_T.tif")4
raster("C:/Users/Julian/Desktop/anual_mean_T.tif")
library(rgdal)
library(raster)
anual_mean_T <- ("C:/Users/Julian/Desktop/anual_mean_T.tif")
anual_mean_T
imported_raster=raster(anual_mean_T)
library(gdal)
install.packages("gdal")
install.packages("rgdal")
bio
anual_mean_T <- read_sf("C:/Users/Julian/Desktop/anual_mean_T.tif")
anual_mean_T <- read_sf("C:/Users/Julian/Desktop/anual_mean_T.tif")
anual_mean_T <- writeRaster("C:/Users/Julian/Desktop/anual_mean_T.tif")
anual_mean_T <- writeRaster("C:/Users/Julian/Desktop/anual_mean_T.tif", anual_mean_T, Gtiff)
anual_mean_T <- raster(system.file("C:/Users/Julian/Desktop/anual_mean_T.tif"))
library(rgdal)
install.packages("rgdal")
library(rgdal)
install.packages("sp")
library(sp)
anual_mean_T <- raster(system.file("C:/Users/Julian/Desktop/anual_mean_T.tif"))
getwd()
anual_mean_T <- raster("anual_temp_T.tif")
anual_mean_T <- read0GR("anual_temp_T.tif")
library(sp)
sudo apt-get update
sudo apt-get install libgdal-dev libproj-dev
imported_raster=raster(anual_mean_T)
sudo apt-get update
sudo apt-get install libgdal-dev libproj-dev
library(rgdal)
library(raster)
install.packages("raster")
install.packages("raster")
install.packages("raster")
library(raster)
raster("anual_mean_T.tif")
raster:raster("anual_mean_T.tif")
raster::raster("anual_mean_T.tif")
rgdal::readOGR("anual_mean_T.tif")
rgdal::raster("anual_mean_T.tif")
raster::raster("anual_mean_T.tif")
raster::raster("anual_mean_T.tiff")
raster::raster("anual_mean_T.tif")
raster::raster("PM10_Feinstaub.tif")
install.packages("rgdal")
install.packages("rgdal")
library(raster)
raster("anual_mean_T")
install.packages(gdal)
library(sf)
st_read("anual_mean_t")
st_read("anual_mean_T")
st_read("anual_mean_T.tif")
read_sf("anual_mean_T.tif")
raster("anual_mean_T.tif")
read0Gr("anual_mean_T.tif")
raster::raster("anual_mean_T.tif")
pk <- getData('GADM', country='PK', level=0)
plot(pk)
cropped_bio <- crop(bio, extent(pk))
plot(cropped_bio$bio1)
plot(cropped_bio$bio1)
plot(cropped_bio$bio1)
plot(cropped_bio$bio1)
clipped_bio <- mask(cropped_bio, pk)
plot(clipped_bio$bio1)
bio <- raster::getData('worldclim', var='bio', res=10)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
bio <- raster::getData('worldclim', var='bio', res=10)
bio
pk <- getData('GADM', country='PK', level=0)
plot(pk)
cropped_bio <- crop(bio, extent(pk))
plot(cropped_bio$bio1)
clipped_bio <- mask(cropped_bio, pk)
plot(clipped_bio$bio1)
bio <- plot(clipped_bio$bio1)
install.packages("usdm")
library(usdm)
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
library(usdm)
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
bio <- raster::getData('worldclim', var='bio', res=10)
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
biom <- exclude(bio, v1) #Entfernt Predictor Daten mit einer geringen Korrelation
biom1 <- plot(biom[[1]])#plottet biom1
library(sdm)
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
p <- predict(m, biom)
plot(p)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
cropped_bio <- crop(p, extent(pk))
plot(cropped_p$bio1)
clipped_bio <- mask(cropped_bio, pk)
plot(clipped_bio)
pk <- getData('GADM', country='PK', level=1)
plot(pk)
cropped_bio <- crop(p, extent(pk))
clipped_bio <- mask(cropped_bio, pk)
plot(clipped_bio)
setwd("C:/Users/Julian/Desktop/Pakistan_Svm")
pk <- getData('GADM', country='PK', level=1)
pk <- getData('GADM', country='GER', level=1)
pk <- getData('GADM', country='GER', level=0)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
pk <- getData('GADM', country='PK', level=0)
library(usdm)
library(sdm)
pk <- getData('GADM', country='PK', level=0)
pk <- getData('GADM', country='PK', level=0)
pk <- getData('GADM', country='PK', level=0)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
cropped_bio <- crop(p, extent(pk))
p <- predict(m, biom)
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
bio <- raster::getData('worldclim', var='bio', res=10) #download & import worldclim data
v1 <- vifstep(bio) #checks predictor data for correlation
v1 <- vifstep(bio) #checks predictor data for correlation
biom <- exclude(bio, v1) #remove predictor data with less correlation
biom1 <- plot(biom[[1]])#plot biom1
points(dis_all, cex=0.5, pch=16) #add dis_all points
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
p <- predict(m, biom)
p <- predict(m, biom)
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
bio <- raster::getData('worldclim', var='bio', res=10) #download & import worldclim data
bio
v1 <- vifstep(bio) #checks predictor data for correlation
v1 <- vifstep(bio) #checks predictor data for correlation
v1
biom <- exclude(bio, v1) #remove predictor data with less correlation
biom
biom
biom1 <- plot(biom[[1]])#plot biom1
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
dis_all <- dis_all$species <- 1
dis_all <- read.csv("C:/Users/Julian/Desktop/test.csv")
dis_all <- dis_all$species <- 1
dis_all <- read.csv("C:/Users/Julian/Desktop/Pakistan_Svm/dis_all.csv")
dis_all
coordinates(dis_all) <- ~longtitude + latitude
coordinates(dis_all) <- ~dd_long + dd_lat
crs(dis_all) <- "+proj=longlat +datum=WGS84"
dis_all <- dis_all$species <- 1
dis_all
dis_all$species <- 1
dis_all
dis_all <- read.csv("C:/Users/Julian/Desktop/Pakistan_Svm/dis_all.csv")
dis_all
coordinates(dis_all) <- ~dd_long + dd_lat
crs(dis_all) <- "+proj=longlat +datum=WGS84"
dis_all$species <- 1
dis_all
bio <- raster::getData('worldclim', var='bio', res=10)
bio
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
biom <- exclude(bio, v1) #Entfernt Predictor Daten mit einer geringen Korrelation
biom1 <- plot(biom[[1]])#plottet biom1
points(dis_all, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
d
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
p <- predict(m, biom)
plot(p)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
cropped_bio <- crop(p, extent(pk))
clipped_bio <- mask(cropped_bio, pk)
plot(clipped_bio)
plot(p)
plot(clipped_bio)
points(dis_all, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
library(raster)
library(usdm)
library(sdm)
dis_all <- read.csv("C:/Users/Julian/Desktop/Pakistan_Svm/dis_all.csv")
dis_all
coordinates(dis_all) <- ~dd_long + dd_lat
crs(dis_all) <- "+proj=longlat +datum=WGS84"
dis_all$species <- 1
dis_all
bio <- raster::getData('worldclim', var='bio', res=10)
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
biom <- exclude(bio, v1) #Entfernt Predictor Daten mit einer geringen Korrelation
biom1 <- plot(biom[[1]])#plottet biom1
points(dis_all, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
p <- predict(m, biom)
plot(p)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
pk <- getData('GADM', country='GER', level=0)
fra <- getData('GADM', country='FRA', level=0)
plot(PK)
fra <- getData('GADM', country='FRA', level=0)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
pk <- getData('GADM', country='PK', level=0)
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
bio <- raster::getData('worldclim', var='bio', res=10)
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
biom <- exclude(bio, v1) #Entfernt Predictor Daten mit einer geringen Korrelation
biom1 <- plot(biom[[1]])#plottet biom1
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
p <- predict(m, biom)
plot(p)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
pk <- getData('GADM', country = 'PK', level = 0)
plot(pk)
pk <- getData('GADM', country = 'PK', level = 0)
plot(pk)
pk <- getData('GADM', country = 'PK', level = 0)
plot(pk)
(p)
p <- predict(m, biom)
bio <- raster::getData('worldclim', var='bio', res=10) #download & import worldclim data
bio
v1 <- vifstep(bio) #checks predictor data for correlation
v1 <- vifstep(bio) #checks predictor data for correlation
v1
biom <- exclude(bio, v1) #remove predictor data with less correlation
biom
biom1 <- plot(biom[[1]])#plot biom1
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
biom1 <- plot(biom[[1]])#plot biom1
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
bio <- raster::getData('worldclim', var='bio', res=10)
bio
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
library(sdm)
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
dis_all <- read.csv("C:/Users/Julian/Desktop/Pakistan_Svm/dis_all.csv") #import
coordinates(dis_all) <- ~dd_long + dd_lat #create a SpatialPointsDataFrame
crs(dis_all) <- "+proj=longlat +datum=WGS84" #project data
dis_all$species <- 1 #add a column species
library(usdm)
bio <- raster::getData('worldclim', var='bio', res=10) #download & import worldclim data
biom <- exclude(bio, v1) #remove predictor data with less correlation
biom1 <- plot(biom[[1]])#plot biom1
library(sdm)
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
setwd("C:/Users/Julian/Desktop/Pakistan_Svm")
library(raster)
dis_all <- read.csv("C:/Users/Julian/Desktop/Pakistan_Svm/dis_all.csv") #import
coordinates(dis_all) <- ~dd_long + dd_lat #create a SpatialPointsDataFrame
crs(dis_all) <- "+proj=longlat +datum=WGS84" #project data
dis_all$species <- 1 #add a column species
library(usdm)
bio <- raster::getData('worldclim', var='bio', res=10) #download & import worldclim data
bio <- raster::getData('worldclim', var='bio', res=10) #download & import worldclim data
v1 <- vifstep(bio) #checks predictor data for correlation
v1 <- vifstep(bio) #checks predictor data for correlation
biom <- exclude(bio, v1) #remove predictor data with less correlation
biom <- exclude(bio, v1) #remove predictor data with less correlation
biom1 <- plot(biom[[1]])#plot biom1
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
library(sdm)
d <- sdmData(species ~., dis_all, predictors = biom, bg = list(n=1000))
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
p <- predict(m, biom)
plot(p)
pk <- getData('GADM', country='PK', level=0)
plot(pk)
pk1 <- getData('GADM', country = 'PK', level = 0)
pk1 <- getData('GADM', country = "PK", level = 0)
pk1 <- getData('GADM', country = pk, level = 0)
pk1 <- raster::getData('GADM', country = 'PK', level = 0)
plot(pk)
pk <- raster::getData('GADM', country = 'PK', level = 0)
plot(pk)
cropped_bio <- crop(p, extent(pk))
clipped_bio <- mask(cropped_bio, pk)
plot(clipped_bio)
cropped_bio <- crop(p, extent(pk))
clipped_bio <- mask(cropped_bio, pk)
plot(clipped_bio)
plot(clipped_bio, xlim = "Latitude", ylim = "Longitude")
plot(clipped_bio, xlab = "Latitude", ylab = "Longitude")
plot(clipped_bio, xlab = "Latitude", ylab = "Longitude", header = "Distribution prediction of butterflies in Pakistan")
plot(clipped_bio, xlab = "Latitude", ylab = "Longitude", head = "Distribution prediction of butterflies in Pakistan")
plot(clipped_bio, xlab = "Latitude", ylab = "Longitude", main = "Distribution prediction of butterflies in Pakistan")
