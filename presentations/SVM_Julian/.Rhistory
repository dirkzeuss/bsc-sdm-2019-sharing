pred <- predict(mymodel, iris)
knitr::opts_chunk$set(echo = TRUE)
install.packages("datasets")
library(datasets)
library(e1071)
data(iris) #drei verschiedene Pflanzenarten
str(iris)
install.packages("datasets")
library(e1071)
data(iris) #drei verschiedene Pflanzenarten
str(iris)
install.packages("vembedr")
embed_url("https://www.youtube.com/watch?v=Y6RRHw9uN9o&t=279s")
library(htmltools)
embed_url("https://www.youtube.com/watch?v=Y6RRHw9uN9o&t=279s")
library(vembedr)
embed_url("https://www.youtube.com/watch?v=Y6RRHw9uN9o&t=279s")
library(e1071)
data(iris) #drei verschiedene Pflanzenarten
str(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point() +
labs(title = 'Sepal Length vs Sepal Width')
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point() +
labs(title = 'Sepal Length vs Sepal Width')
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
labs(title = 'Petal Length vs Petal Width')
#Generierung des Models
mymodel <- svm(Species~., data=iris)
summary(mymodel)
#Plot der SVM Classification
plot(mymodel, data=iris,
Petal.Width~Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
#Auswertung des Modells
pred <- predict(mymodel, iris)
tab <- table(Predicted = pred, Actual = iris$Species)
tab
1-sum(diag(tab))/sum(tab) #Gibt in Prozent an, wie genau das Modell ist
plot(mymodel, data=iris,
Petal.Width~Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
![](C:/Users/Julian/Desktop/SVM/SVM_picture.png)
library(e1071)
library(ggplot2)
data(iris) #drei verschiedene Pflanzenarten
str(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point() +
labs(title = 'Sepal Length vs Sepal Width')
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, colour = Species)) +
geom_point() +
labs(title = 'Petal Length vs Petal Width')
#Generierung des Models
mymodel <- svm(Species~., data=iris)
summary(mymodel)
#Plot der SVM Classification
plot(mymodel, data=iris,
Petal.Width~Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
tab <- table(Predicted = pred, Actual = iris$Species)
tab
1-sum(diag(tab))/sum(tab) #Gibt in Prozent an, wie genau das Modell ist
library(dismo)
##Download und Bearbeitung der Daten einer (Tier)Art
lynx <- gbif("Lynx", "pardinus", download=T, geo=T, sp=F)
class(lynx) #Zeigt Objekttyp an
w <- which(is.na(lynx$lon)) #ueberprueft die lon-Spalte, ob NA beinhaltet
w #integer(0) = beinhaltet kein NA mehr
lynx <- lynx[-w,] #Zeilen mit NA werden gelÃ¶scht
w #integer(0) = beinhaltet kein NA mehr
w <- which(is.na(lynx$lat)) #ueberprueft die lat-Spalte, ob NA beinhaltet
lynx$species <- 1 #fuegt eine neue Spalte mit species hinzu
sp <- sp[,c('lon', 'lat', 'species')] #Beschriftung der Spalten
lynx <- lynx[,c('lon', 'lat', 'species')] #Beschriftung der Spalten
head(lynx)
coordinates(lynx) <- ~lon + lat #erstellt einen SpatialPointsDataFrame
class(lynx)
bio <- raster::getData('worldclim', var='bio', res=10)
bio
library(usdm)
v1 <- vifstep(bio) #Ueberprueft Predictor Daten nach ihrer Korrelation
v1
biom <- exclude(bio, v1) #Entfernt Predictor Daten mit einer geringen Korrelation
biom
plot(biom[[1]]) #plottet biom1
points(sp, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
points(lynx, cex=0.5, pch=16) #fuegt Lynx pardinus Daten hinzu
proj4string(lynx) <- projection(raster()) #projiziert das sp Objekt in das Koordinatensystem WGS84
library(sdm)
d <- sdmData(species ~., lynx, predictors = biom, bg = list(n=1000))
d
getmethodNames() #Anzeige der verfuegbaren Methoden
m <- sdm(species ~., d, methods=c('svm')) #Anwendung der Methode
m
p <- predict(m, biom) # erstellt die Karte anhand des Modells und der Umweltdaten
plot(p) #Plottet Karte mit Verbreitungsgebiet
